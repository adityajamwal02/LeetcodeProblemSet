/*
Given a string return all unique possible subsequences which start with vowel and end with consonant. A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.
NOTE: Return all the unique subsequences in lexicographically sorted order.

Example 1:
Input: S = "abc"
Output: "ab", "ac", "abc"
Explanation: "ab", "ac", "abc" are
the all possible subsequences which
start with vowel and end with consonant.

Example 2:
Input: S = "aab"
Output: "ab", "aab"
Explanation: "ab", "aab" are the all
possible subsequences which start
with vowel and end with consonant.

Your Task:
You dont need to read input or print anything. Complete the function allPossileSubsequences() which takes S as input parameter and returns all possible subsequences which start with vowel and end with consonant.

Expected Time Complexity: O(n*logn*2n)
Expected Auxiliary Space: O(2n)
*/

// User function Template for C++
class Solution {
  public:
    bool vowelCheck(char ch){
        if(ch=='a' or ch=='e' or ch=='i' or ch=='o' or ch=='u' or ch=='A' or ch=='E' or ch=='I' or ch=='O' or ch=='U'){
            return true;
        }
    return false;
    }
    void solve(int index, int n, string S, string output, vector<string> &result){
        if(index>=n){
            if(output.size()>1 and (vowelCheck(output[0])==true) and (vowelCheck(output[output.size()-1])==false)){
                result.push_back(output);
            }
        return;
        }
        output.push_back(S[index]);
        solve(index+1,n,S,output,result);
        output.pop_back();
        solve(index+1,n,S,output,result);
    }
    set<string> allPossibleSubsequences(string S) {
        set<string> answer;
        vector<string> result;
        string  output="";
        int n=S.size();
        solve(0,n,S,output,result);
        sort(result.begin(), result.end());
        for(auto it: result){
            answer.insert(it);
        }
    return answer;
    }
};
